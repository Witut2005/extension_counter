"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LongSwitch_1 = require("./Args/LongSwitch");
const ShortSwitch_1 = require("./Args/ShortSwitch");
const Command_1 = require("./Args/Command");
class ArgCollection {
    constructor() {
        this._data = {
            commands: [],
            longSwitches: {},
            shortSwitches: {},
        };
        this.hasCommand = this.hasCommand.bind(this);
        this.getCommand = this.getCommand.bind(this);
        this.hasShortSwitch = this.hasShortSwitch.bind(this);
        this.getShortSwitch = this.getShortSwitch.bind(this);
        this.hasLongSwitch = this.hasLongSwitch.bind(this);
        this.getLongSwitch = this.getLongSwitch.bind(this);
        this.appendCommand = this.appendCommand.bind(this);
        this.addSwitch = this.addSwitch.bind(this);
        this._addShortSwitch = this._addShortSwitch.bind(this);
        this._addLongSwitch = this._addLongSwitch.bind(this);
    }
    get rawdata() {
        return this._data;
    }
    get data() {
        const commands = this._data.commands.map(command => command.name);
        const shortSwitches = {};
        Object.values(this._data.shortSwitches).forEach(s => {
            shortSwitches[s.name] = s.values;
        });
        const longSwitches = {};
        Object.values(this._data.longSwitches).forEach(s => {
            longSwitches[s.name] = s.values;
        });
        return { commands, shortSwitches, longSwitches };
    }
    hasCommand(argName) {
        return (this._data.commands.findIndex(command => command.name === argName) >= 0);
    }
    getCommand(argName) {
        return this._data.commands.find(command => command.name === argName);
    }
    hasShortSwitch(argName) {
        return this._data.shortSwitches[argName] !== undefined;
    }
    getShortSwitch(argName) {
        return this._data.shortSwitches[argName];
    }
    hasLongSwitch(argName) {
        return this._data.longSwitches[argName] !== undefined;
    }
    getLongSwitch(argName) {
        return this._data.longSwitches[argName];
    }
    appendCommand(arg) {
        if (ShortSwitch_1.default.isShortSwitch(arg) || LongSwitch_1.default.isLongSwitch(arg))
            throw Error('arg is not a Command');
        const command = new Command_1.default(arg);
        this._data.commands.push(command);
    }
    addSwitch(arg, values = []) {
        if (ShortSwitch_1.default.isShortSwitch(arg)) {
            const switches = ShortSwitch_1.default.getAllSwitches(arg);
            for (let i = 0; i < switches.length; i++) {
                const s = switches[i];
                if (i === switches.length - 1)
                    s.values = values;
                this._addShortSwitch(s);
            }
        }
        else if (LongSwitch_1.default.isLongSwitch(arg)) {
            const argName = arg.slice(2);
            this._addLongSwitch(argName, values);
        }
        else {
            throw Error('arg is not ShortSwitch or LongSwitch');
        }
    }
    _addShortSwitch(switchOrArgName, argValues = []) {
        if (switchOrArgName instanceof ShortSwitch_1.default) {
            this._data.shortSwitches[switchOrArgName.name] = new ShortSwitch_1.default(switchOrArgName);
        }
        else if (typeof switchOrArgName === 'string') {
            this._data.shortSwitches[switchOrArgName] = new ShortSwitch_1.default(switchOrArgName, argValues);
        }
    }
    _addLongSwitch(switchOrArgName, argValues = []) {
        if (switchOrArgName instanceof LongSwitch_1.default) {
            this._data.longSwitches[switchOrArgName.name] = new LongSwitch_1.default(switchOrArgName);
        }
        else if (typeof switchOrArgName === 'string') {
            this._data.longSwitches[switchOrArgName] = new LongSwitch_1.default(switchOrArgName, argValues);
        }
    }
}
exports.default = ArgCollection;
//# sourceMappingURL=ArgCollection.js.map